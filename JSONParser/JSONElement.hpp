#ifndef JSONObject_hpp
#define JSONObject_hpp

#include "ValueChar.hpp"
#include "ValueString.hpp"
#include "ValueNumber.hpp"
#include "ValueBool.hpp"
#include "ValueArray.hpp"
#include "ValueObject.hpp"
/**
 * @brief Класът JSONElement представя един елемент катп съвкупност от име и стойност.
 * Името е символен низ, а стойността е указател към обект от клас Value.
 */
class JSONElement
{
private:
    /**
     * @brief Символен низ, съдържащ името на джейсън елемента.
     */
    string Name;
    /**
     * @brief Указател, сочещ към стойността на дадения елемент.
     */
    Value* value;
    /**
     * @brief Частен метод, който копира информацията от друг представител на класа.
     * Копира се името на другия обект, а за стойността се използва методът clone, който всички наследници на Value имплементират.
     * @param other друг обект от JSONElement, чиито стойности ще се копират
     */
    void copy(const JSONElement& other);
public:
    /**
     * @brief Конструктор по подразбиране който задава празен низ за име, а указателят към nullptr.
     */
    JSONElement();
    /**
     * @brief Конструктор, който по подадени символни низове за име и стойност, създава обект JSONElement.
     * В зависимост какъв е първият символ на стойността, се създава въответния тип стойност.
     * @param Name символен низ с името на елемента
     * @param Value символен низ със стойността на елемента
     */
    JSONElement(const string& Name,const string& Value);
    /**
     * @brief Копиращ конструктор, който създава обект копие, използвайки метода copy.
     * @param other обект, който ще бъде използван за създаване на копието.
     */
    JSONElement(const JSONElement& other);
    /**
     * @brief Оператор, който присвоява стойност на друг обект от JSONElement. Ако обектът, от който ще се присвоява стойността, е различен, то досегашната стойност на value се изтрива и се заменя с новата.
     * @param other обект, който ще бъде използван за присвояването.
     * @return псевдоним към обекта, на който сме присвоили дадената стойност.
     */
    JSONElement& operator=(const JSONElement& other);
    /**
     * @brief Деструктор, който изтрива заделената памет за value.
     */
    ~JSONElement();
    /**
     * @brief Булев оператор ==, който проверява дали дадени два елемента са еднакви.
     * @param other обект, който ще бъде използван за проверката.
     */
    bool operator==(const JSONElement& other) const;
    /**
     * @brief Mетод, който връща символен низ името на елемента и не позволява промяна.
     */
    std::string getName()const;
    /**
     * @brief Mетод, който връща символен низ стойността на елемента и не позволява промяна.
     */
    std::string getValue()const;
    /**
     * @brief По подаден символен низ променя стойността на елемента.
     * @param Value Символен низ с новата стойност.
     */
    void editValue(const std::string& Value);
    /**
     * @brief Подновява съдържанието на член данната от класа Value при евентуална промяна на някой от стойностите (ако са от тип ValueArray или ValueObject)
     * При откриване на елементи, съдържащи други такива, функцията се извиква рекувсивно за всеки един от тях.
     */
    void updateValue();
    /**
     * @brief Константен булев метод, който намира дали един елемент съществува по подаден път. При откриване на елементи, съдържащи други такива, функцията се извиква рекувсивно за всеки един от тях.
     * @param path масив от низове, указващ пътя до търсения елемент
     * @param PathIndex променлива от тип size_t, подадена като псевдоним, която следи на кое ниво от пътя е текущото търсене
     */
    bool FindElementPath(const vector<string>& path,size_t& PathIndex) const;
    /**
     * @brief Метод, който по подаден път намира даден елемент и заменя стойността му с друга. Ако елементът се съдържа в обект, се извиква метода EditElementByPathObject, а ако се намира в масив-EditElementByPathArray.
     * @see EditElementByPathObject
     * @see EditElementByPathArray
     * @param path масив от низове, указващ пътя до търсения елемент
     * @param Value новата стойност, която трябва да се промени
     */
    void EditByPath(const vector<std::string>& path,const std::string& Value);
    /**
     * @brief Метод, който по подаден път намира даден елемент, съдържащ се в обект, и заменя стойността му с подадената. Функцията се извиква рекурсивно до намиране на елемента.
     * @param path масив от низове, указващ пътя до търсения елемент
     * @param EditIndex променлива от тип size_t, подадена като псевдоним, която следи на коя позиция се намира елементът за промяна на съответното ниво
     * @param PathIndex променлива от тип size_t, подадена като псевдоним, която следи на кое ниво от пътя е текущото търсене
     * @param Value новата стойност, която трябва да се промени
     */
    void EditElementByPathObject(const vector<std::string>& path,size_t& EditIndex,size_t& PathIndex,const std::string& Value);
    /**
     * @brief Метод, който по подаден път намира даден елемент, съдържащ се в масив, и заменя стойността му с подадената. Функцията се извиква рекурсивно до намиране на елемента.
     * @param path масив от низове, указващ пътя до търсения елемент
     * @param EditIndex променлива от тип size_t, подадена като псевдоним, която следи на коя позиция се намира елементът за промяна на съответното ниво
     * @param PathIndex променлива от тип size_t, подадена като псевдоним, която следи на кое ниво от пътя е текущото търсене
     * @param Value новата стойност, която трябва да се промени
     */
    void EditElementByPathArray(const vector<std::string>& path,size_t& EditIndex,size_t& PathIndex,const std::string& Value);
    /**
     * @brief Метод, който по подаден път намира даден елемент, съдържащ се в обект, и го изтрива. Функцията се извиква рекурсивно до намиране на елемента.
     * @param path масив от низове, указващ пътя до търсения елемент
     * @param PathIndex променлива от тип size_t, подадена като псевдоним, която следи на кое ниво от пътя е текущото търсене
     */
    void RemoveByPathObject(const vector<std::string>& path,size_t& PathIndex);
    /**
     * @brief Метод, който по подаден път намира даден елемент, съдържащ се в масив, и го изтрива. Функцията се извиква рекурсивно до намиране на елемента.
     * @param path масив от низове, указващ пътя до търсения елемент
     * @param PathIndex променлива от тип size_t, подадена като псевдоним, която следи на кое ниво от пътя е текущото търсене
     */
    void RemoveByPathArray(const vector<std::string>& path,size_t& PathIndex);
    /**
     * @brief Метод, който по подаден път намира даден елемент, съдържащ се в обект, и го запазва в подаден масив от JSONElemen-ти. Функцията се извиква рекурсивно до намиране на елемента.
     * @param path масив от низове, указващ пътя до търсения елемент
     * @param PathIndex променлива от тип size_t, подадена като псевдоним, която следи на кое ниво от пътя е текущото търсене
     * @param Searched масив, съдържащ търсени елементи, в който ще се запази намерения елемент
     */
    void SearchByPath(const vector<std::string>& path,size_t& PathIndex,vector<JSONElement>& Searched);
    /**
     * @brief Метод, който по подаден път създава елемент и мъ задава стойност. Функцията се извиква рекурсивно до изчерпване на пътя.
     * @param path масив от низове, указващ пътя
     * @param PathIndex променлива от тип size_t, подадена като псевдоним, която следи на кое ниво от пътя е текущото създаване
     * @param value стойността на елемента
     */
    void CreateByPath(const vector<std::string>& path,const std::string& value,size_t& PathIndex);
    /**
     * @brief Връща стойността на елемент като позволява нейната промяна.
     * @return указател, сочещ към обект от тип Value
     */
    Value* GetValue();
    /**
     * @brief Връща броя на всички елементи, независимо дали те се съдържат в други обекти.
     * @param Cnt променлива от тип size_t, подадена като псевдоним, която брой елементите
     * @return броя на всички елементи
     */
    size_t CountAllElements(size_t& Cnt);
    /**
     * @brief Метод, който извиква метода PrintWithSpaces.
     * @param out поток за писане
     */
    void CallPrintWithSpaces(ostream& out) const;
    /**
     * @brief Принтира елемент. Ако елементът е обект, рекурсивно се извиква същия метод, за да се принтира с отмествания и нови редове, с цел по-добра четивност
     * @param out поток за писане
     * @param TabIndex (подаден като псевдоним) брой колко пъти трябва да се изведе табулация за конкретното ниво.
     */
    void PrintWithSpaces(ostream& out,size_t& TabIndex) const;
    /**
     * @brief Принтира името и стойността на елемент
     * @param out поток за писане
     */
    void Print(ostream& out) const;
};

#endif /* JSONObject_hpp */

